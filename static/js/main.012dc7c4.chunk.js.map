{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","comps/Title.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","App.js","index.js"],"names":["firebaseConfig","apiKey","process","authDomain","DOMAIN","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebase","projectStorage","projectFirestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","_docs","forEach","doc","push","data","id","ImageGrid","setSelectedImg","className","map","div","key","layout","whileHover","opacity","onClick","url","img","src","alt","initial","animate","transition","delay","Modal","selectedImg","e","target","classList","contains","y","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","add","createdAt","ProgressBar","setFile","width","UploadForm","type","onChange","selected","files","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.012dc7c4.chunk.js","sourcesContent":["import * as firebase from 'firebase/app'\r\nimport 'firebase/storage'\r\nimport 'firebase/firestore'\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_KEY,\r\n  authDomain: process.env.DOMAIN,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\r\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n}\r\n\r\nfirebase.initializeApp(firebaseConfig)\r\n\r\nconst projectStorage = firebase.storage()\r\nconst projectFirestore = firebase.firestore()\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp\r\n\r\nexport { projectFirestore, projectStorage, timestamp }","import { useEffect, useState } from 'react'\nimport { projectFirestore } from '../firebase/config'\n\nconst useFirestore = (collection) => {\n  const [docs, setDocs] = useState([])\n\n  useEffect(() => {\n    const unsub = projectFirestore.collection(collection)\n      .orderBy('createdAt', 'desc')\n      .onSnapshot((snap) => {\n        let _docs = []\n        snap.forEach(doc => {\n          _docs.push({ ...doc.data(), id: doc.id })\n        })\n        setDocs(_docs)\n      })\n\n    return () => unsub()\n\n  }, [collection])\n\n  return { docs }\n}\n\nexport default useFirestore","import React from 'react'\nimport useFirestore from '../hooks/useFirestore'\nimport { motion } from 'framer-motion'\n\nconst ImageGrid = ({ setSelectedImg }) => {\n\n  const { docs } = useFirestore('images')\n\n\n  return (\n    <div className='img-grid'>\n      {docs && docs.map((doc) => (\n        <motion.div className=\"img-wrap\" key={doc.id}\n          layout\n          whileHover={{ opacity: 1 }}\n          onClick={() => setSelectedImg(doc.url)}>\n          <motion.img src={doc.url} alt=\"uploaded pict\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 }}\n          />\n        </motion.div>\n      ))}\n    </div>\n  )\n}\n\nexport default ImageGrid\n","import React from 'react'\nimport { motion } from 'framer-motion'\n\nconst Modal = ({ selectedImg, setSelectedImg }) => {\n\n  const handleClick = function (e) {\n    e.target.classList.contains('backdrop') && setSelectedImg(null)\n  }\n\n  return (\n    <motion.div className='backdrop' onClick={handleClick}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n    >\n      <motion.img src={selectedImg} alt=\"enlarged pic\"\n        initial={{ y: '-100vh' }}\n        animate={{ y: 0 }}\n      />\n    </motion.div>\n  )\n}\n\nexport default Modal\n","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>Insta Fire ðŸ”¥</h1>\n      <h2>Your Pictures</h2>\n      <p>This is the collection of all your pictures</p>\n    </div>\n  )\n}\n\nexport default Title;","import { useEffect, useState } from 'react'\nimport { projectStorage, projectFirestore, timestamp } from '../firebase/config'\n\nconst useStorage = (file) => {\n  const [progress, setProgress] = useState(0)\n  const [error, setError] = useState(null)\n  const [url, setUrl] = useState(null)\n\n  useEffect(() => {\n    // references\n    const storageRef = projectStorage.ref(file.name)\n    const collectionRef = projectFirestore.collection('images')\n\n\n    storageRef.put(file).on('state_changed', (snap) => {\n      let percentage = (snap.bytesTransferred / snap.totalBytes) * 100\n      setProgress(percentage)\n    }, (err) => {\n      setError(err)\n    }, async () => {\n      const url = await storageRef.getDownloadURL()\n      collectionRef.add({\n        url,\n        createdAt: timestamp()\n      })\n      setUrl(url)\n    })\n    return () => { }\n  }, [file])\n\n  return { progress, url, error }\n}\n\nexport default useStorage","import React from 'react'\nimport useStorage from '../hooks/useStorage'\nimport { motion } from 'framer-motion'\n\nconst ProgressBar = ({ file, setFile }) => {\n  const { url, progress } = useStorage(file)\n\n\n  return (\n    <motion.div className='progress-bar'\n      initial={{ width: 0 }}\n      animate={{ width: progress + '%' }}\n    >\n      {url && setFile(null)}\n    </motion.div>\n  )\n}\n\nexport default ProgressBar\n","import React, { useState } from 'react'\nimport ProgressBar from './ProgressBar'\n\nconst UploadForm = () => {\n\n  const [file, setFile] = useState(null)\n  const [error, setError] = useState(null)\n\n  const changeHandler = function (e) {\n    const selected = e.target.files[0]\n    const validTypes = ['image/png', 'image/jpeg']\n\n    if (selected && validTypes.includes(selected.type)) {\n      setFile(selected)\n      setError(null)\n    } else {\n      setFile(null)\n      setError('Select a valid type for uploading. PNG or JPEG')\n    }\n\n  }\n\n  return (\n    <form>\n      <label>\n        <input type=\"file\" onChange={changeHandler} />\n        <span>+</span>\n      </label>\n      <div className=\"output\">\n        {error && <div className=\"error\">{error}</div>}\n        {file && <div>{file.name}</div>}\n        {file && <ProgressBar file={file} setFile={setFile} />}\n      </div>\n    </form>\n  )\n}\n\nexport default UploadForm\n","import React, { useState } from 'react'\nimport ImageGrid from './comps/ImageGrid'\nimport Modal from './comps/Modal'\nimport Title from './comps/Title'\nimport UploadForm from './comps/UploadForm'\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null)\n\n  return (\n    <div className=\"App\">\n      <Title />\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      {selectedImg && <Modal setSelectedImg={setSelectedImg} selectedImg={selectedImg} />}\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}